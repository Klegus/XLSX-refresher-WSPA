name: Universal CI/CD Pipeline

on:
  push:
    branches: [ "dev", "staging", "secondyear" ]
  pull_request:
    branches: [ "dev", "staging", "secondyear" ]

env:
  PYTHON_VERSION: "3.12"
  MONGODB_VERSION: "4.4"
  IMAGE_NAME: "xlsx-refresher-wspa"

jobs:
  check-env-vars:
    runs-on: ubuntu-latest
    steps:
      - name: Check required environment variables
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          EMAIL: ${{ secrets.EMAIL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          SELECTED_MODEL: ${{ secrets.SELECTED_MODEL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          WERKZEUG_RUN_MAIN: ${{ secrets.WERKZEUG_RUN_MAIN }}
          ENABLE_COMPARER: ${{ secrets.ENABLE_COMPARER }}
        run: |
          missing_or_empty=()
          
          check_var() {
            if [ -z "${!1}" ]; then
              missing_or_empty+=("$1")
            fi
          }
          
          check_var "REGISTRY_URL"
          check_var "REGISTRY_USERNAME"
          check_var "REGISTRY_PASSWORD"
          check_var "EMAIL"
          check_var "SENTRY_DSN"
          check_var "PASSWORD"
          check_var "OPENROUTER_API_KEY"
          check_var "SELECTED_MODEL"
          check_var "DISCORD_WEBHOOK_URL"
          check_var "MONGO_URI"
          check_var "WERKZEUG_RUN_MAIN"
          check_var "ENABLE_COMPARER"
          
          if [ ${#missing_or_empty[@]} -ne 0 ]; then
            echo "❌ Following environment variables are missing or empty:"
            printf '%s\n' "${missing_or_empty[@]}"
            exit 1
          fi
          
          echo "✅ All required environment variables are properly set!"
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint
      - name: Run linting
        run: |
          pylint --disable=R,C,W1203,W0703,W0611,W0621,W0404,W1309,W0702,W1401,W0612,W3101,W0602,W0603 *.py

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy types-requests types-pytz types-colorama
      - name: Run type checking
        run: |
          mypy --ignore-missing-imports \
               --follow-imports=silent \
               --allow-untyped-defs \
               --allow-incomplete-defs \
               --no-strict-optional \
               --disable-error-code=no-untyped-def \
               --disable-error-code=no-untyped-call \
               --disable-error-code=var-annotated \
               .

  style:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run style checking
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --statistics

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run security checks
        run: |
          echo "Running Bandit security checks..."
          bandit -r . --confidence-level medium --severity-level medium -c .bandit.yml || true
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Production branch - enforcing strict security checks"
            safety scan --output screen --policy-file .safety-policy.yml
          else
            echo "Development branch - running security checks in report-only mode"
            safety scan --output screen || true
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Check for test files
        id: check_tests
        run: |
          if find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
            echo "Tests found"
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "No test files found in the repository"
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests with coverage
        if: steps.check_tests.outputs.has_tests == 'true'
        run: |
          pytest --cov=./ --cov-report=xml --cov-report=term-missing
        env:
          MONGO_URI: mongodb://localhost:27017/
          PLANS_DIRECTORY: lesson_plans
          SAVE_TO_MONGODB: "true"
          SAVE_TO_FILE: "false"
          ENABLE_COMPARER: "false"

      - name: Generate empty coverage report
        if: steps.check_tests.outputs.has_tests == 'false'
        run: |
          echo "Generating coverage report without tests"
          python -m coverage run --source=./ -m pytest || true
          python -m coverage xml
          python -m coverage report || true
          echo "Note: No tests were found. Consider adding tests to improve code quality."

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false  
          flags: unittests
          name: codecov-umbrella
          verbose: true

  build:
    name: Build Docker Image
    needs: [check-env-vars , lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
            ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy deploy script to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: ".github/workflows/templates/deploy-scripts/deploy.sh"
          target: "/tmp"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          envs: |
            EMAIL=${{ secrets.EMAIL }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            PASSWORD=${{ secrets.PASSWORD }}
            OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
            SELECTED_MODEL=${{ secrets.SELECTED_MODEL }}
            DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            WERKZEUG_RUN_MAIN=${{ secrets.WERKZEUG_RUN_MAIN }}
            ENABLE_COMPARER=${{ secrets.ENABLE_COMPARER }}
            MONGO_DB=${{ secrets.MONGO_DB }}
            REGISTRY_URL=${{ secrets.REGISTRY_URL }}
            REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }}
            REGISTRY_PASSWORD=${{ secrets.REGISTRY_PASSWORD }}
            BRANCH_NAME=${{ github.event.inputs.branch || github.ref_name }}
            IMAGE_NAME=${{ secrets.IMAGE_NAME }}
          script: |
            chmod +x /tmp/deploy-scripts/deploy.sh
            /tmp/deploy-scripts/deploy.sh