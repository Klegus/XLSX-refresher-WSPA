name: Universal CI/CD Pipeline

on:
  push:
    branches: [ "dev", "staging", "secondyear" ]
  pull_request:
    branches: [ "dev", "staging", "secondyear" ]

env:
  PYTHON_VERSION: "3.12"
  MONGODB_VERSION: "4.4"
  IMAGE_NAME: "xlsx-refresher-wspa"

jobs:
  check-env-vars:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check required environment variables
        run: |
          required_vars=(
            "REGISTRY_URL"
            "REGISTRY_USERNAME"
            "REGISTRY_PASSWORD"
            "EMAIL"
            "SENTRY_DSN"
            "PASSWORD"
            "OPENROUTER_API_KEY"
            "SELECTED_MODEL"
            "DISCORD_WEBHOOK_URL"
            "MONGO_URI"
            "WERKZEUG_RUN_MAIN"
            "ENABLE_COMPARER"
            "MONGO_DB"
          )
          
          missing_vars=()
          empty_vars=()
          
          for var in "${required_vars[@]}"; do
            # Sprawdź czy zmienna istnieje w secrets
            if [ -z "${{ secrets[var] }}" ]; then
              if [ ! -z "${{ secrets[var] }}" ]; then
                empty_vars+=("$var")
              else
                missing_vars+=("$var")
              fi
            fi
          done
          
          # Wyświetl brakujące zmienne
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "❌ Missing required secrets:"
            printf '%s\n' "${missing_vars[@]}"
            exit 1
          fi
          
          # Wyświetl puste zmienne
          if [ ${#empty_vars[@]} -ne 0 ]; then
            echo "❌ Following secrets are empty:"
            printf '%s\n' "${empty_vars[@]}"
            exit 1
          fi
          
          echo "✅ All required environment variables are properly set!"
  lint:
    name: Code Quality
    needs: check-env-vars
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint
      - name: Run linting
        run: |
          pylint --disable=R,C,W1203,W0703,W0611,W0621,W0404,W1309,W0702,W1401,W0612,W3101,W0602,W0603 *.py

  test:
    name: Run Tests & Type Checks
    needs: lint
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov mypy types-requests types-pytz types-colorama flake8 bandit safety

      - name: Run type checking
        run: |
          mypy --ignore-missing-imports \
               --follow-imports=silent \
               --allow-untyped-defs \
               --allow-incomplete-defs \
               --no-strict-optional \
               --disable-error-code=no-untyped-def \
               --disable-error-code=no-untyped-call \
               --disable-error-code=var-annotated \
               .

      - name: Run style checking
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --statistics

      - name: Run security checks
        run: |
          bandit -r . --confidence-level medium --severity-level medium -c .bandit.yml || true
          safety scan --output screen || true
          
      - name: Run tests with coverage
        run: |
          pytest --cov=./ --cov-report=xml --cov-report=term-missing
        env:
          MONGO_URI: mongodb://localhost:27017/
          PLANS_DIRECTORY: lesson_plans
          SAVE_TO_MONGODB: "true"
          SAVE_TO_FILE: "false"
          ENABLE_COMPARER: "false"

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          flags: unittests
          name: codecov-umbrella
          verbose: true

  build:
    name: Build Docker Image
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
            ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: ${{ github.ref_name }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Make deploy script executable
        run: chmod +x .github/workflows/templates/deploy-scripts/deploy.sh
      
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          password: ${{ secrets.DEPLOY_PASSWORD }}
          script_stop: true
          envs: |
            REGISTRY_URL=${{ secrets.REGISTRY_URL }}
            REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }}
            REGISTRY_PASSWORD=${{ secrets.REGISTRY_PASSWORD }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            MONGO_DB=${{ secrets.MONGO_DB }}
            BRANCH_NAME=${{ github.ref_name }}
            EMAIL=${{ secrets.EMAIL }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            PASSWORD=${{ secrets.PASSWORD }}
            OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
            SELECTED_MODEL=${{ secrets.SELECTED_MODEL }}
            DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            WERKZEUG_RUN_MAIN=${{ secrets.WERKZEUG_RUN_MAIN }}
            ENABLE_COMPARER=${{ secrets.ENABLE_COMPARER }}
          script: |
            .github/workflows/templates/deploy-scripts/deploy.sh